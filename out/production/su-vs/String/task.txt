Задачи для закрепления concat():
1) Напишите программу, которая принимает две строки от пользователя и объединяет их с помощью метода concat().
Выведите результат на экран.
2) Напишите метод, который принимает две строки в качестве аргументов и возвращает новую строку,
объединяющую их с помощью метода concat().
3) Напишите программу, которая проверяет, содержит ли введенная пользователем строка определенную подстроку.
Используйте метод concat() для объединения строк и метод contains() для проверки наличия подстроки.
4) Создайте метод, который принимает массив строк в качестве аргумента и возвращает одну строку, объединяющую все элементы
массива с помощью метода concat().

Задачи для закрепления indexOf() lastIndexOf():

5) Напишите программу, которая принимает строку от пользователя и подстроку, которую нужно найти в этой строке.
Выведите на экран индекс (позицию) первого вхождения подстроки с использованием метода indexOf().
6) Напишите метод, который принимает две строки в качестве аргументов и возвращает индекс (позицию) первого вхождения
второй строки в первую строку с использованием метода indexOf().
7) Напишите программу, которая принимает строку от пользователя и подстроку, которую нужно найти в этой строке. Выведите
на экран индекс (позицию) последнего вхождения подстроки с использованием метода lastIndexOf().
8) Создайте метод, который принимает две строки в качестве аргументов и возвращает индекс (позицию) последнего вхождения
второй строки в первую строку с использованием метода lastIndexOf().
Задачи для закрепления toLowerCase() toUpperCase():
9) Напишите программу, которая принимает строку от пользователя и выводит ее в нижнем регистре с использованием метода
toLowerCase().
10) Напишите метод, который принимает строку в качестве аргумента и возвращает новую строку, содержащую все символы исходной
строки в верхнем регистре с использованием метода toUpperCase().
11) Напишите программу, которая принимает строку от пользователя и проверяет, является ли она полностью написанной в
верхнем регистре с использованием методов toLowerCase() и equals().
12) Создайте метод, который принимает строку в качестве аргумента и возвращает новую строку, содержащую все символы
исходной строки в нижнем регистре с использованием метода toLowerCase(). Затем используйте методы indexOf() и
lastIndexOf() для поиска определенной подстроки в исходной и новой строках и сравните их результаты.

Задачи для закрепления length() chatAt() substring() trim():

13) Напишите программу, которая принимает строку от пользователя и выводит ее длину с использованием метода length().
14) Напишите метод, который принимает строку и индекс символа в качестве аргументов и возвращает символ в указанной позиции
с использованием метода charAt().
15) Напишите программу, которая принимает строку от пользователя и выводит ее подстроку, начинающуюся с указанного индекса
и заканчивающуюся с указанного индекса с использованием метода substring().
16)Напишите программу, которая принимает строку от пользователя и выводит ее без начальных и конечных пробелов с
использованием метода trim().

Задачи для закрепления startsWith() endsWith():

17) Напишите программу, которая принимает строку от пользователя и проверяет, начинается ли она с определенного префикса,
введенного пользователем, с использованием метода startsWith(). Выведите соответствующее сообщение на экран.
18) Напишите метод, который принимает две строки в качестве аргументов и возвращает булевое значение true, если первая
строка заканчивается второй строкой, и false в противном случае, с использованием метода endsWith().
19) Напишите программу, которая принимает массив строк и выводит только те строки, которые начинаются с определенного
префикса, введенного пользователем, с использованием метода startsWith().

Задачи для закрепления StringBuilder:

20) Напишите программу, которая принимает строку от пользователя и использует StringBuilder для удаления всех пробелов из
строки. Выведите полученную строку на экран.
21) Напишите метод, который принимает две строки в качестве аргументов и использует StringBuilder для объединения их в одну
строку с разделителем между ними. Верните
22) Напишите программу, которая принимает строку от пользователя и использует StringBuilder для замены всех гласных букв
в строке на символ "!" (включая заглавные и строчные гласные буквы). Выведите полученную строку на экран.
23) Напишите метод, который принимает массив строк в качестве аргумента и использует StringBuilder для объединения всех
строк в одну строку, разделяя их символом переноса строки ("\n"). Верните полученную строку.

Задачи для закрепления format():

24) Напишите программу, которая форматирует строку с использованием спецификаторов формата для отображения текущей даты и
времени в определенном формате.
25) Напишите программу, которая форматирует строку с использованием объекта Formatter для отображения информации о продукте
(название, цена, количество) в виде табличных данных.
26) Напишите программу, которая форматирует строку с использованием плейсхолдеров и флагов форматирования для отображения
информации о студенте (имя, возраст, средний балл) в виде табличных данных с выравниванием по центру.

10 практических задач для закрепления темы String  среднего уровня сложности

27) Напишите метод, который принимает на вход строку и проверяет, является ли она палиндромом (читается одинаково в обоих
направлениях), игнорируя регистр символов и пробелы.
28) Напишите метод, который принимает на вход две строки и определяет, является ли одна строка анаграммой другой строки
(содержит те же символы в том же количестве, но в другом порядке).
29) Напишите метод, который принимает на вход строку и возвращает ее "обратное" представление, то есть все слова в строке
записаны в обратном порядке.
30) Напишите метод, который принимает на вход строку и определяет, является ли она панграммой (содержит все буквы алфавита).
31) Напишите метод, который принимает на вход строку и возвращает ее версию, где каждое слово начинается с заглавной буквы.
32) Напишите метод, который принимает на вход строку и заменяет все вхождения одного слова на другое слово.
33)) Напишите метод, который принимает на вход строку и определяет, является ли она палиндромом, учитывая только буквы
алфавита, игнорируя регистр.
34) Напишите метод, который принимает на вход строку и определяет, является ли она панграммой, учитывая только буквы а
лфавита, игнорируя регистр.
35) Напишите метод, который принимает на вход строку и возвращает ее версию, где все гласные буквы заменены на символ "#".
36) Напишите метод, который принимает на вход строку и определяет, является ли она палиндромом, учитывая только цифры и
игнорируя все остальные символы.

10 практических задач для закрепления темы String  высокого уровня сложности

37) Напишите программу, которая принимает на вход строку и проверяет, является ли она палиндромом. При этом игнорируйте
пробелы, знаки препинания и регистр символов.
38) Реализуйте программу, которая принимает на вход строку и выводит все уникальные слова из этой строки, упорядоченные в
алфавитном порядке. При этом игнорируйте знаки препинания и регистр символов.
39) Создайте программу, которая принимает на вход текст и подсчитывает количество вхождений заданного слова в тексте. При
этом учитывайте только полное совпадение слов, игнорируя регистр символов.
40) Напишите программу, которая принимает на вход строку с номером телефона в формате "+7 (XXX) XXX-XXXX" и проверяет,
является ли она валидным номером телефона.
41) Реализуйте программу, которая принимает на вход строку и заменяет все вхождения определенного слова на другое слово,
при этом учитывая регистр символов. Например, замените все вхождения слова "apple" на "orange" в данной строке.
42) Создайте программу, которая принимает на вход строку и выводит самое длинное слово в этой строке, игнорируя знаки
препинания и регистр символов.
43) Напишите программу, которая принимает на вход две строки и проверяет, являются ли они анаграммами друг друга, то есть
состоят ли они из одинаковых символов, но в разном порядке. При этом игнорируйте пробелы и регистр символов.
44) Реализуйте программу, которая принимает на вход строку с датой в формате "dd.MM.yyyy" и проверяет, является ли она
валидной датой. Учтите разные форматы дат, такие как "dd/MM/yyyy" и "dd-MM-yyyy".
45)Создайте программу, которая принимает на вход текст и выводит все предложения в этом тексте, упорядоченные по длине, от
самого короткого до самого длинного.
46) Напишите программу, которая принимает на вход строку и проверяет, является ли она правильным email-адресом,
соответствующим формату "username@domain.com". При этом учитывайте различные правила формирования email-адресов, такие
как наличие "@" и "." в правильных местах.