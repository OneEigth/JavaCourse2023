package String;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class main {
    public static void main(String[] args) {
        // Привет! Мой адрес электронной почты - example@example.com.
        // Пожалуйста, свяжитесь со мной по этому адресу или по телефону +7(123)456-78-90.
        //Найдите все адреса электронной почты в данном тексте и номер телефона в формате +7(XXX)XXX-XX-XX:
        String text = "Привет! Мой адрес электронной почты -example@example.com. " +
                "Пожалуйста, свяжитесь со мной по этому адресу или по телефону +7(123)456-78-90. \n";

        String regex = "\\b[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}\\b";
      /*
        \\b: Символ начала слова, указывает на начало слова.

        [A-Za-z0-9._%+-]+: Один или более символов из класса символов, включающего заглавные и строчные буквы
        английского алфавита (A-Z, a-z), цифры (0-9) и специальные символы (._%+-). Это соответствует локальной части
        адреса электронной почты, которая может содержать буквы, цифры и указанные специальные символы.

        @: Символ "@" - обязательный символ в адресе электронной почты.
        [A-Za-z0-9.-]+: Один или более символов из класса символов, включающего заглавные и строчные буквы английского
        алфавита (A-Z, a-z), цифры (0-9), точку (".") и дефис ("-"). Это соответствует доменной части адреса электронной
        почты, которая может содержать буквы, цифры, точки и дефисы.

        \\.: Символ точки (".") - обязательный символ в доменной части адреса электронной почты. Здесь используется
        обратный двойной слэш (\\) перед точкой, чтобы указать, что это специальный символ и его нужно искать как текстовый
        символ, а не как метасимвол.

        [A-Z|a-z]{2,}: Две или более заглавные или строчные буквы английского алфавита. Это соответствует верхнему
        уровню домена (например, .com, .org, .ru).
        \\b: Символ конца слова, указывает на конец слова.
       */

        String regex2 = "\\+7\\(\\d{3}\\)\\d{3}-\\d{2}-\\d{2}";

        /*
        \\b: Символ начала слова, указывает на начало слова.
        \\+7: Символ "+7" - обязательный символ в начале телефонного номера.
        \\(: Символ "(" - обязательный символ скобки перед тремя цифрами.
        \\d{3}: Три цифры подряд - обязательная последовательность цифр после открывающей скобки.
        \\): Символ ")" - обязательный символ закрывающей скобки после трех цифр.
        \\d{3}-\\d{2}-\\d{2}: Последовательность из трех цифр, затем дефис, затем две цифры, еще один дефис, и еще две цифры. Это соответствует оставшейся части телефонного номера в формате "XXX-XX-XX".
        \\b: Символ конца слова, указывает на конец слова.
         */

        Pattern pattern = Pattern.compile(regex);
        /*
        Pattern.compile(regex) - создает объект Pattern, который содержит скомпилированное регулярное выражение.
        Этот объект можно использовать для создания объекта Matcher, который будет искать текст,
        соответствующий регулярному выражению.
       */

        Matcher matcher = pattern.matcher(text);

        /*
        pattern.matcher(text) - создает объект Matcher, который будет искать текст, соответствующий регулярному выражению.
        Этот объект можно использовать для поиска и извлечения текста, соответствующего регулярному выражению.
         */

        Pattern pattern2 = Pattern.compile(regex2);
        Matcher matcher2 = pattern2.matcher(text);

        while (matcher.find()) {
            System.out.println(matcher.group());
        }

        /*
        while (matcher.find()) - Пока совпадение найдено, метод find() возвращает true.
        matcher.group() - Возвращает найденное совпадение.
         */

        while (matcher2.find()) {
            System.out.println(matcher2.group());
        }


        //Извлеките все даты в формате "дд.мм.гггг" из данного текста:
        String text2 = "Встреча запланирована на 12.04.2023. Будем рады видеть вас!";
        String regex3 = "\\d{2}\\.\\d{2}\\.\\d{4}";
        Pattern pattern3 = Pattern.compile(regex3);
        Matcher matcher3 = pattern3.matcher(text2);
        while (matcher3.find()) {
            System.out.println(matcher3.group());
        }
        //Найдите все теги HTML в данном тексте:
        String text3 = "<div class=\"container\">\n" +
                     "  <h1>Hello, world!</h1>\n" +
                      "  <p>This is a paragraph</p>\n" +
                      "  <a href=\"https://example.com\">Visit our website</a>\n" +
                      "</div>";

        String regex4 = "<[^>]+>";
        Pattern pattern4 = Pattern.compile(regex4);
        Matcher matcher4 = pattern4.matcher(text3);
        while (matcher4.find()) {
            System.out.println(matcher4.group());
        }
        //Извлеките все слова, начинающиеся с буквы "a" или "A" из данного текста:
        String text4 = "Alice and Alex are playing in the park. Anna is reading a book.";
        String regex5 = "\\b[Aa]\\w+";
        Pattern pattern5 = Pattern.compile(regex5);
        Matcher matcher5 = pattern5.matcher(text4);
        while (matcher5.find()) {
            System.out.println(matcher5.group());
        }

        //Замените все вхождения слова "кот" на "собака" в данной строке:
        String text5 = "Коты - это лучшие друзья человека. Коты - это лучшие друзья человека. Коты - это лучшие друзья человека.";
        String regex6 = "Коты";
        String regex7 = "Собаки";
        Pattern pattern6 = Pattern.compile(regex6);
        Matcher matcher6 = pattern6.matcher(text5); //создаем объект Matcher
        String text6 = matcher6.replaceAll(regex7); //заменяем все вхождения слова "кот" на "собака"
        System.out.println(text6);


        /*
        Метасимволы:
        . - любой символ, кроме символа новой строки \n
        \d - любая цифра [0-9]
        \D - любой символ, кроме цифры [^0-9]
        \s - любой пробельный символ [ \t\n\x0B\f\r]
        \S - любой символ, кроме пробельного [^\s]
        \w - любая цифра или буква [a-zA-Z_0-9]
        \W - любой символ, кроме буквы или цифры [^\w]
        \b - граница слова
        \B - не граница слова
        \z - конец строки
        \Z - конец строки, но перед окончанием \n
        \G - конец предыдущего совпадения
        \A - начало строки
        ^ - начало строки
        $ - конец строки
        [abc] - любой символ из набора "abc"
        [^abc] - любой символ, кроме символов из набора "abc"
        [a-zA-Z] - любой символ из диапазона "a-z" или "A-Z"
        [a-d[m-p]] - любой символ из диапазона "a-d" или "m-p": [a-dm-p] (объединение)
        [a-z&&[def]] - пересечение диапазонов: [def]
        [a-z&&[^bc]] - вычитание из диапазона "a-z" символов "b" и "c": [ad-z] (все символы из диапазона "a-z", кроме "b" и "c")
        [a-z&&[^m-p]] - вычитание из диапазона "a-z" диапазона "m-p": [a-lq-z] (все символы из диапазона "a-z", кроме символов из диапазона "m-p")

        Метасимволы для поиска символьных классов:
        \d - цифра: [0-9]
        \D - не цифра: [^0-9]
        \s - пробельный символ: [ \t\n\x0B\f\r]
        \S - не пробельный символ: [^\s]
        \w - буква или цифра: [a-zA-Z_0-9]
        \W - не буква и не цифра: [^\w]

        Метасимволы для поиска символов редактирования текста
        \t - символ табуляции
        \n - символ новой строки
        \r - символ возврата каретки
        \f - символ перевода формата
        \a - символ звонка
        \e - символ эскейп
        \cx - символ управления с кодом x
        \cX - символ управления с кодом X
        \Q...\E - экранирование всех метасимволов внутри фигурных скобок
        \ - экранирование метасимвола

         Метасимволы для группировки символов:
        [abc] - любой символ из набора "abc"
        [^abc] - любой символ, кроме символов из набора "abc"
        [a-zA-Z] - любой символ из диапазона "a-z" или "A-Z"
        [a-d[m-p]] - любой символ из диапазона "a-d" или "m-p": [a-dm-p] (объединение)
        [a-z&&[def]] - пересечение диапазонов: [def]
        [a-z&&[^bc]] - вычитание из диапазона "a-z" символов "b" и "c": [ad-z] (все символы из диапазона "a-z", кроме "b" и "c")
        [a-z&&[^m-p]] - вычитание из диапазона "a-z" диапазона "m-p": [a-lq-z] (все символы из диапазона "a-z", кроме символов из диапазона "m-p")

        Метасимволы для обозначения количества символов – квантификаторы.
        Квантификатор всегда следует после символа или группы символов.
        ? - 0 или 1 вхождение
        * - 0 или более вхождений
        + - 1 или более вхождений
        {n} - n вхождений
        {n,} - n или более вхождений
        {n,m} - от n до m вхождений
        a? - 0 или 1 вхождение символа "a"
        a* - 0 или более вхождений символа "a"
        a+ - 1 или более вхождений символа "a"
        a{5} - 5 вхождений символа "a"
        a{2,4} - от 2 до 4 вхождений символа "a"
        (a|b|c) - любая из строк "a", "b" или "c"
        (a|b|c)* - любая строка, состоящая из 0 или более вхождений строк "a", "b" или "c"
         */
    }
}
