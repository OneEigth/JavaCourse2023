package Array.sort;

public class InsertionSort {
    //1) Метод принимает на вход массив целых чисел arr, который нужно отсортировать по возрастанию.
    public static void insertionSort(int[] arr) {
        int n = arr.length;
        //2) Внешний цикл for итерируется по массиву arr с индексами от 1 до n-1, где n - длина массива.
        // Это делается потому, что первый элемент массива уже считается отсортированным по определению.
        for (int i = 1; i < arr.length; i++) {
            int key = arr[i];
            int j = i - 1;

            //3) Внутренний цикл while выполняется до тех пор, пока индекс j не станет меньше 0 или значение на
            // позиции не станет меньше key, где key - текущий элемент, который нужно вставить на свою правильную
            // позицию.
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
                //4) Внутри цикла while происходит сдвиг элементов массива вправо на одну позицию,
                // чтобы освободить место для вставки key. Это делается с помощью оператора
                // arr[j + 1] = arr[j];,
                // который перезаписывает значение на позиции j в ячейку справа от нее.
            }

            //5) После окончания цикла while найдена правильная позиция для вставки key, и его значение записывается
            // на эту позицию с помощью arr[j + 1] = key;.
            arr[j + 1] = key;

            //6) После завершения внутреннего цикла while текущий элемент key вставлен на свою правильную позицию в
            // отсортированной части массива.
        }
        //7) Внешний цикл for продолжает итерироваться до тех пор, пока все элементы массива не будут рассмотрены и
        // отсортированы.
        //8) После завершения внешнего цикла for массив arr будет отсортирован в порядке возрастания.
    }

    //9) Метод insertionSort выполняет сортировку вставками, сдвигая элементы массива на свои места и вставляя
    // текущий элемент на свою правильную позицию в отсортированной части массива. Этот алгоритм является не самым
    // эффективным алгоритмом сортировки, но может быть использован для небольших массивов или в специфических случаях.
}
        //Сортировка вставками (Insertion Sort) - это простой алгоритм сортировки, который сравнивает элементы массива
        // и вставляет их на правильные позиции в отсортированной части массива. Он имеет следующий алгоритм работы:

        //1) Алгоритм начинает с первого элемента массива (индекс 0) и считает его отсортированным.

        //2) Затем алгоритм последовательно проходит по оставшимся элементам массива (начиная с индекса 1)
        // и вставляет каждый элемент на правильную позицию в отсортированной части массива.

        //3) Для вставки элемента на правильную позицию, алгоритм сравнивает его со всеми предыдущими элементами
        // в отсортированной части массива, начиная с последнего элемента отсортированной части и двигаясь к началу.

        //4) Если текущий элемент меньше предыдущего элемента, то алгоритм меняет их местами, иначе текущий элемент
        // уже находится на правильной позиции в отсортированной части массива, и алгоритм переходит к следующему элементу.

        //5) Алгоритм повторяет шаги 3-4 для всех оставшихся элементов массива, пока не будет обработан последний
        // элемент.

        //6) После завершения алгоритма, весь массив будет отсортирован в порядке возрастания (или убывания, в
        // зависимости от условий сравнения элементов).

        //Преимущества сортировки вставками включают простоту реализации и отсутствие дополнительной памяти,
        // так как сортировка выполняется "на месте" (in-place), без создания дополнительных массивов. Однако,
        // недостатком сортировки вставками является ее медленная производительность на больших массивах, так как
        // ее время выполнения имеет квадратичную сложность O(n^2), где n - количество элементов в массиве.
        // Поэтому она может быть неэффективна для больших наборов данных, и другие алгоритмы сортировки, такие как
        // быстрая сортировка или сортировка слиянием, могут быть более предпочтительными для таких случаев.