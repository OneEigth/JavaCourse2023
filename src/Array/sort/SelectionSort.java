package Array.sort;

        //Алгоритм сортировки выбором состоит из следующих шагов:

        //Находим наименьший (или наибольший) элемент в массиве. Для этого проходим по всему массиву,
        // сравнивая каждый элемент с текущим минимальным (или максимальным) значением, и обновляем минимальное
        // (или максимальное) значение при необходимости.

        //Перемещаем найденный минимальный (или максимальный) элемент на соответствующую позицию в отсортированной
        // части массива. Для этого меняем местами найденный элемент с элементом на текущей позиции в отсортированной
        // части массива.

        //Повторяем шаги 1 и 2 для оставшихся элементов массива до тех пор, пока не отсортируем весь массив.

        //Вот реализация алгоритма сортировки выбором на языке Java:

public class SelectionSort {
    public static void selectionSort(int[] arr) {
        int n = arr.length; // Получаем длину массива
        for (int i = 0; i < n - 1; i++) {
            int minIdx = i; // Индекс текущего минимального элемента
            for (int j = i + 1; j < n; j++) {
                // Сравниваем текущий элемент с минимальным элементом
                if (arr[j] < arr[minIdx]) {
                    minIdx = j; // Обновляем индекс минимального элемента
                }
            }
            // Меняем местами минимальный элемент и элемент на текущей позиции
            int temp = arr[minIdx];
            arr[minIdx] = arr[i];
            arr[i] = temp;
        }
    }
    // Метод selectionSort принимает на вход одномерный массив целых чисел arr, который нужно отсортировать
    // по возрастанию с использованием алгоритма сортировки выбором.

    // Основная идея метода заключается в том, чтобы на каждом шаге находить минимальный элемент в оставшейся
    // неотсортированной части массива и перемещать его на соответствующую позицию в отсортированной части массива.

    //Основные шаги метода:

    // 1) Инициализируем переменную n с длиной массива arr.

    // 2) Внешний цикл for выполняется n - 1 раз, где i - индекс текущего элемента, который будет находиться на своей
    // окончательной позиции после сортировки.

    // 3) Внутренний цикл for выполняется для оставшейся неотсортированной части массива, начиная с элемента,
    // следующего за текущим элементом i. Мы находим индекс минимального элемента в этой неотсортированной части
    // массива, сравнивая каждый элемент с текущим минимальным элементом.

    // 4) Если находим элемент меньше текущего минимального элемента, то обновляем индекс минимального элемента на j.

    // 5) После окончания внутреннего цикла, нашли индекс минимального элемента в неотсортированной части массива.
    // Меняем местами минимальный элемент и элемент на текущей позиции i, чтобы переместить минимальный элемент на
    // свою окончательную позицию.

    // 6) Повторяем шаги 3-5 для оставшихся элементов массива, пока не отсортируем весь массив.

    // 7)По окончанию работы метода, массив arr будет отсортирован по возрастанию.

    //8) Это основные шаги, которые выполняет метод

    //Таким образом, алгоритм сортировки выбором позволяет отсортировать массив путем нахождения наименьшего
    // (или наибольшего) элемента и перемещения его на соответствующую позицию в отсортированной части массива.
}