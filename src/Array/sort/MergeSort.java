package Array.sort;
//Сортировка слиянием (Merge Sort) - это эффективный алгоритм сортировки, который работает на принципе
//"разделяй и властвуй". Он рекурсивно разделяет массив на две равные или почти равные части, сортирует их отдельно,
//а затем объединяет две отсортированные части в один отсортированный массив.

//Вот шаги, выполняемые алгоритмом сортировки слиянием:
//1)Разделение массива: Исходный массив разделяется на две равные или почти равные части. Можно использовать рекурсивный
//подход для разделения массива на подмассивы, пока их размер не станет равным 1.
//2)Сортировка подмассивов: Каждый подмассив сортируется рекурсивно с использованием того же алгоритма сортировки
//слиянием. Это делается путем повторного разделения и сортировки подмассивов до тех пор, пока их размер не станет
//равным 1.
//3)Слияние подмассивов: Отсортированные подмассивы объединяются в один отсортированный массив. Это делается путем
//сравнения элементов в подмассивах и объединения их в правильном порядке. Объединенный массив является отсортированным
//результатом.

//Вот пример реализации сортировки слиянием на языке Java:
public class MergeSort {
    public static void merge(int[] arr, int left, int mid, int right) {
        // Определение размеров подмассивов
        int n1 = mid - left + 1;
        int n2 = right - mid;

        // Создание временных подмассивов
        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];

        // Копирование данных во временные подмассивы
        for (int i = 0; i < n1; ++i) {
            leftArr[i] = arr[left + i];
        }
        for (int j = 0; j < n2; ++j) {
            rightArr[j] = arr[mid + 1 + j];
        }

        // Слияние временных подмассивов обратно в исходный массив
        int i = 0, j = 0;
        int k = left;
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        // Копирование оставшихся элементов из leftArr
        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        // Копирование оставшихся элементов из rightArr
        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            // Нахождение среднего элемента
            int mid = left + (right - left) / 2;

            // Рекурсивная сортировка двух половинок массива
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            // Слияние двух отсортированных половинок
            merge(arr, left, mid, right);
        }
    }

    public static void main(String[] args) {
        int[] arr = { 64, 34, 25, 12, 22, 11, 90 };
        int n = arr.length;

        System.out.println("Исходный массив:");
        for (int i : arr) {
            System.out.print(i + " ");
        }

        mergeSort(arr, 0, n - 1);

        System.out.println("\nОтсортированный массив:");
        for (int i : arr) {
            System.out.print(i + " ");
        }
    }
}
//Этот код реализует алгоритм сортировки слиянием на языке Java. Он использует метод mergeSort() для рекурсивной
//сортировки подмассивов и метод merge() для слияния отсортированных подмассивов в один отсортированный массив.
//Результат сортировки выводится на экран в консоли.
